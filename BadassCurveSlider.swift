class BadassCurveSlider:UIControl{var thumbW:CGFloat=30;var maxValue:CGFloat=1;var minValue:CGFloat=0;var isRightSide:Bool=false{willSet{textLayer.alignmentMode = newValue ? .right:.left}};var borderColor:UIColor = .purple{willSet{setNeedsDisplay()}};var fillColor:UIColor = .white{willSet{setNeedsDisplay()}};private var maxH:CGFloat{return (frame.height<thumbW ? UIScreen.main.bounds.height:frame.height)-thumbW/2};var currentValue:CGFloat{get{return (1-(currentProgress-thumbW/2)/(maxH-thumbW/2))*(maxValue-minValue)+minValue}set{guard (minValue...maxValue).contains(newValue) else{self.currentValue=newValue>maxValue ? maxValue:minValue;return};currentProgress=(1-(newValue-minValue)/(maxValue-minValue))*(maxH-thumbW/2)+thumbW/2}};private var currentProgress:CGFloat=UIScreen.main.bounds.height{didSet{/*guard (0...maxH).contains(currentProgress) else{currentProgress=currentProgress>maxH ? maxH:0;return}*/if !(thumbW/2...maxH).contains(currentProgress){currentProgress=currentProgress>maxH ? maxH:thumbW/2};valueChanged?(currentValue);updateText();setNeedsDisplay()}};var textLayerStr:NSAttributedString{return NSAttributedString(string: String(format: "%.0f", currentValue), attributes: [NSAttributedString.Key.font : UIFont.systemFont(ofSize: 15),NSAttributedString.Key.foregroundColor:UIColor.white])};var valueChanged:((_:CGFloat)->Void)?;var didEndSlide:((_:CGFloat)->Void)?;var path:CGMutablePath{let path=CGMutablePath();if isRightSide{let startPoint=CGPoint(x: thumbW*3/2, y: thumbW/2);let endPoint=CGPoint(x: thumbW/4, y: frame.height-thumbW/2);path.move(to: startPoint);path.addQuadCurve(to: endPoint, control: CGPoint(x: frame.width*2-thumbW*3/2, y: frame.height/2));path.addQuadCurve(to: CGPoint(x: thumbW/4, y: thumbW/2), control: CGPoint(x: frame.width*2-thumbW*2, y: frame.height/2-thumbW/4));path.addLine(to: startPoint)}else{let startPoint=CGPoint(x: frame.width-thumbW*3/2, y: thumbW/2);let endPoint=CGPoint(x: frame.width-thumbW/4, y: frame.height-thumbW/2);path.move(to: startPoint);path.addQuadCurve(to: endPoint, control: CGPoint(x: -frame.width+thumbW*3/2, y: frame.height/2));/*path.addQuadCurve(to: CGPoint(x: startPoint.x, y: frame.height-thumbW*2/3), control: CGPoint(x: frame.width, y: frame.height))*/path.addQuadCurve(to: CGPoint(x: frame.width-thumbW/4, y: thumbW/2), control: CGPoint(x: -frame.width+thumbW*2, y: frame.height/2-thumbW/4));/*path.addQuadCurve(to: startPoint, control: CGPoint(x: frame.width-thumbW/4, y: thumbW/4))*/path.addLine(to: startPoint)/*ctx.addCurve(to: CGPoint(x: startPoint.x, y: frame.height-thumbW/2), control1: CGPoint(x: -frame.width/4+thumbW/2, y: 0), control2: CGPoint(x: -frame.width/4+thumbW/2, y: frame.height))ctx.addQuadCurve(to: CGPoint(x: startPoint.x, y: frame.height-thumbW*2/3), control: CGPoint(x: frame.width-thumbW/4, y: frame.height-thumbW*2/3))ctx.addCurve(to: CGPoint(x: frame.width-thumbW/2, y: thumbW), control1: CGPoint(x: -frame.width/4+thumbW/2+thumbW/4, y: frame.height-thumbW/4), control2: CGPoint(x: -frame.width/4+thumbW/2+thumbW/2, y: thumbW/2))ctx.addQuadCurve(to: startPoint, control: CGPoint(x: frame.width, y: thumbW*2/3))xw*/};return path}/*lazy var shapeLayer:CAShapeLayer = {let shapeLayer=CAShapeLayer()shapeLayer.path=pathshapeLayer.fillColor=UIColor.white.cgColorshapeLayer.strokeColor=UIColor.yellow.cgColorshapeLayer.fillRule = .evenOddshapeLayer.strokeEnd=0.75shapeLayer.strokeStart=0.25return shapeLayer}()*/;lazy var textLayer:CATextLayer={let textLayer=CATextLayer();textLayer.string=textLayerStr;/*textLayer.fontSize=20*/textLayer.alignmentMode = .right;textLayer.frame=CGRect(x: frame.width-50, y: frame.height/2-10, width: 50, height: 20);textLayer.contentsScale=5;/*textLayer.frame.origin=CGPoint(x: frame.width-50, y: frame.height/2)*/return textLayer}();override init(frame: CGRect) {super.init(frame: frame);initialize();};required init?(coder aDecoder: NSCoder) {super.init(coder: aDecoder);initialize()};private func initialize(){backgroundColor = .clear;layer.addSublayer(textLayer)/*layer.addSublayer(shapeLayer)*/};func setCurrent(value:CGFloat){self.currentValue=value};func updateText(){textLayer.string=textLayerStr;textLayer.frame.size.width=textLayerStr.size().width;if !isRightSide{textLayer.frame.origin.x=frame.width-textLayerStr.size().width}};override func draw(_ rect: CGRect) {super.draw(rect)};override func draw(_ layer: CALayer, in ctx: CGContext) {super.draw(layer, in: ctx);ctx.setStrokeColor(borderColor.cgColor);ctx.setLineJoin(.round);ctx.setLineCap(.round);ctx.beginPath()/*ctx.addArc(center: center, radius: 30, startAngle: 0, endAngle: 2*CGFloat.pi,clockwise: false)ctx.closePath()ctx.clip()*/;ctx.addPath(path)/*let startPoint=CGPoint(x: frame.width-thumbW/2, y: thumbW/2)ctx.move(to: startPoint)ctx.addQuadCurve(to: CGPoint(x: startPoint.x/*frame.width-thumbW*2/3*/, y: frame.height-thumbW/2), control: CGPoint(x: -frame.width+thumbW, y: frame.height/2))ctx.addQuadCurve(to: CGPoint(x: startPoint.x, y: frame.height-thumbW*2/3), control: CGPoint(x: frame.width, y: frame.height))ctx.addQuadCurve(to: CGPoint(x: startPoint.x, y: thumbW), control: CGPoint(x: -frame.width+thumbW*3/2, y: frame.height/2))ctx.addQuadCurve(to: startPoint, control: CGPoint(x: frame.width-thumbW/4, y: thumbW/4))*/;ctx.closePath();ctx.strokePath()/*ctx.clip(to: CGRect(x: 0, y: 0, width: 100, height: 50))*/;ctx.clip(to: CGRect(x: 0, y: currentProgress, width: frame.width, height: frame.height*10));ctx.setFillColor(fillColor.cgColor);ctx.addPath(path);ctx.fillPath()};override func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {currentProgress=touch.location(in: self).y;return super.beginTracking(touch, with: event)};override func continueTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {currentProgress=touch.location(in: self).y;return super.continueTracking(touch, with: event)};override func endTracking(_ touch: UITouch?, with event: UIEvent?) {super.endTracking(touch, with: event);didEndSlide?(currentValue)};override func layoutSubviews() {super.layoutSubviews();if isRightSide{textLayer.frame=CGRect(x: 0, y: frame.height/2-10, width: 50, height: 20)}else{textLayer.frame=CGRect(x: frame.width-50, y: frame.height/2-10, width: 50, height: 20)}}}
